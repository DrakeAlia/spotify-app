// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Our db is on heroku and prisma just needs to know the URL for the database to connect to

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["createMany"]
}

// Shadow DB - We use another db called shadow db because when prisma does its migrations it does something called shadow db, where it makes another db
// But on Heroku, for the free postgres that they give you, the user that's assigned to that does not have the permission to create a db
// So the work around is to make another db until prisma to use this db of the shadow db and this database is the real db to get around the permission issue on heroku
// So that's the only drawback of using heroku, might be simpler to click then to get some docker thing and deploy to elastic
// If your going to use locally on the computer, make sure the user on postgres has permission to create db(admin permission or if you deploy it somewhere else in which case you need one URL)
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// model for the user which will be unique
// id        Int        @id @default(autoincrement()) - I want an id field, its type is integer, so it'll be a number. This is the id field of this model, so it's going to make it unique. 
// default we want to auto increment so every time a new user is saved go up by 1
// updatedAt DateTime   @updatedAt - That'll auto set that field for you every time you update an instance of a user
model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  firstName String
  lastName  String
  password  String
  playlists Playlist[]
}

// song will not be unique because there are songs with the same names
// artist    Artist     @relation(fields: [artistId], references: [id]) - Is going to map to the artist ID, so that's how it knows what artists to go to. And it's referencing the ID field on the artist which is in the Artist model field for id
model Song {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  artist    Artist     @relation(fields: [artistId], references: [id])
  artistId  Int
  playlists Playlist[]
  duration  Int
  url       String
}

// model for the artist which will be unique in terms of the artist's name
model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[]
  name      String   @unique
}

// model for the playlist which will have a reference to the user's id that's associated with that playlist
model Playlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

// npx prisma db push - Which is almost the same as a migration but it doesn't create a history
// It's bascially meant for prototyping the schema without fully committing.
// Once you push up, you'll get some confirmation that prisma is in sync with your db that you deployed. 
// Then it'll say generated a prisma client which means that we've notified the db about these schema changes. 
// And generated a client that is gonna be used for us to query the db and it's gonna come with types generated based off our schema
// Always db push whenever you change anything in the schema 

// npx prisma migrate dev - Basically confirms the db changes that we made(sort like a git push) and push these migrations up to the db
// It'll give us a diff of all the schemas and ask if you want to continue, in which it'll reset the PostgresSQL db
// After that it'll ask you to give your migrations a name to describe want you did on this db change 
// Finally you will see that you've made a new migration, it'll create a file for that migration as well and then it also generated the prisma client again to generate those types for TS based off of our schema
